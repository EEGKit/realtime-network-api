openapi: "3.0.0"
info:
  description: "Remote control and stream data from Pupil Invsibile Companion"
  version: "1.0.0"
  title: "Pupil Labs Realtime API"
servers:
  - url: http://pi.local:8080/api
    description: PI device server
paths:
  /status:
    get:
      tags:
        - status
      summary: "phone status; upgrade to websocket connection; updates about Phone/Sensor/Recording/NetworkDevice/Event updates"
      description: ""
      responses:
        "200":
          description: "phone status"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StatusEnvelope"
        "101":
          description: "upgrade to websocket, send updates for Phone/Sensor/Recording/NetworkDevice/Event"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"

  /recording:start:
    post:
      tags:
        - recording
      summary: "start recording"
      description: ""
      responses:
        "200":
          description: "recording started"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordingStartEnvelope"
        "500":
          description: "recording start failed <br />Possible errors: <br /> - Recording running <br /> - Template has required fields <br /> - Low battery <br /> - Low storage <br /> - No wearer selected <br /> - No workspace selected <br /> - Setup bottom sheets not completed"

  /recording:stop_and_save:
    post:
      tags:
        - recording
      summary: "stop and save recording"
      description: "stop and save recording, only possible if template has no required fields"
      responses:
        "200":
          description: "recording stopped and saved"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordingStopEnvelope"
        "500":
          description: "recording stop and save failed <br />Possible errors: <br /> - Recording not running <br /> - template has required fields"

  /recording:cancel:
    post:
      tags:
        - recording
      summary: "cancel recording"
      description: "cancel recording"
      responses:
        "200":
          description: "recording stopped and discarded"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecordingCancelEnvelope"
        "500":
          description: "recording cancel failed <br />Possible errors: <br /> - Recording not running"

  /event:
    post:
      tags:
        - events
      requestBody:
        description: recording event
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventPost"
      summary: "create recording event"
      description: ""
      responses:
        "200":
          description: "recording event added"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventEnvelope"

components:
  schemas:
    Envelope:
      type: object
      required: [message, result]
      properties:
        message:
          type: string
        result:
          type: object
      discriminator:
        propertyName: envelope_message

    Status:
      type: object
      required: [model, data]
      properties:
        model:
          type: string
        data:
          type: object
          oneOf:
            - $ref: "#/components/schemas/Event"
            - $ref: "#/components/schemas/Recording"
            - $ref: "#/components/schemas/NetworkDevice"
            - $ref: "#/components/schemas/Sensor"
            - $ref: "#/components/schemas/Phone"

    StatusEnvelope:
      type: object
      allOf:
        - $ref: "#/components/schemas/Envelope"
        - type: object
          required: [result]
          properties:
            result:
              type: array
              items:
                $ref: "#/components/schemas/Status"

    Phone:
      type: object
      required:
        [ip, port, device_id, device_name, battery_level, memory, memory_state]
      properties:
        ip:
          type: string
          format: "ip"
        port:
          type: number
        device_id:
          type: string
        device_name:
          type: string
        battery_level:
          type: number
        battery_state:
          type: string
          enum: ["OK", "LOW", "CRITICAL"]
        memory:
          type: number
        memory_state:
          type: string
          enum: ["OK", "LOW", "CRITICAL"]

    Hardware:
      type: object
      required: [version, world_camera_serial, glasses_serial]
      properties:
        version:
          type: string
        world_camera_serial:
          type: string
        glasses_serial:
          type: string

    NetworkDevice:
      type: object
      required: [ip, device_id, device_name, connected]
      properties:
        ip:
          type: string
          format: "ip"
          readOnly: true
        device_id:
          type: string
          readOnly: true
        device_name:
          type: string
          readOnly: true
        connected:
          type: boolean
          readOnly: true

    RecordingStart:
      type: object
      required: [id]
      properties:
        id:
          type: string
          format: "uuid"
          readOnly: true

    RecordingStartEnvelope:
      type: object
      allOf:
        - $ref: "#/components/schemas/Envelope"
        - type: object
          required: [result]
          properties:
            result:
              $ref: "#/components/schemas/RecordingStart"

    RecordingStop:
      type: object
      required: [id, rec_duration_ns]
      properties:
        id:
          type: string
          format: "uuid"
          readOnly: true
        rec_duration_ns:
          type: integer
          description: "Recording duration ns"
          readOnly: true

    RecordingStopEnvelope:
      type: object
      allOf:
        - $ref: "#/components/schemas/Envelope"
        - type: object
          required: [result]
          properties:
            result:
              $ref: "#/components/schemas/RecordingStop"
    Recording:
      type: object
      required: [id, rec_duration_ns, message, action]
      properties:
        id:
          type: string
          format: "uuid"
          readOnly: true
        rec_duration_ns:
          type: integer
        message:
          type: string
        action:
          type: string
          enum: ["START", "STOP", "SAVE", "DISCARD", "ERROR"]

    RecordingCancel:
      type: object
      required: [id]
      properties:
        id:
          type: string
          format: "uuid"
          readOnly: true

    RecordingCancelEnvelope:
      type: object
      allOf:
        - $ref: "#/components/schemas/Envelope"
        - type: object
          required: [result]
          properties:
            result:
              $ref: "#/components/schemas/RecordingCancel"

    Event:
      type: object
      required: [name, timestamp, recording_id]
      properties:
        name:
          type: string
        timestamp:
          type: integer
          format: int64
        recording_id:
          type: string
          format: uuid
          readOnly: true
      example:
        timestamp: 1643899966134527000
        recording_id: "123e4567-e89b-12d3-a456-426614174000"

    EventPost:
      type: object
      required: [name]
      properties:
        name:
          type: string
        timestamp:
          type: integer
          format: int64
      example:
        name: "send event"
        timestamp: 1643899966134527000

    EventEnvelope:
      type: object
      allOf:
        - $ref: "#/components/schemas/Envelope"
        - type: object
          required: [result]
          properties:
            result:
              $ref: "#/components/schemas/Event"

    Sensor:
      type: object
      required:
        ["sensor", "conn_type", "protocol", "ip", "port", "params", "connected"]
      properties:
        sensor:
          type: string
          enum: ["world", "gaze"]
        conn_type:
          type: string
          enum: ["DIRECT", "WEBSOCKET"]
        protocol:
          type: string
        ip:
          type: string
        port:
          type: integer
        params:
          type: string
        connected:
          type: boolean
      example:
        sensor: "world"
        protocol: "rtsp"
        ip: "192.168.2.101"
        port: 8686
        params: "camera=world"
        connected: true
